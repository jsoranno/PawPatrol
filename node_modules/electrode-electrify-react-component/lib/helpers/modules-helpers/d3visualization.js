"use strict";

exports.__esModule = true;

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _getIterator2 = require("babel-runtime/core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

exports.default = function (d3Data) {
  //eslint-disable-line func-style, max-statements
  var domElements = d3Data.refs;
  var root = d3Data.root;
  var width = 850;
  var height = 500;
  var radius = Math.min(width, height) * 0.45;
  var deg = 120;

  var svg = _d2.default.select(domElements.svg).append("svg")
  //responsive SVG needs these 2 attr and no width or hight attr
  .attr("preserveAspectRatio", "xMinYMin meet").attr("viewBox", "0 0 " + width + " " + height).style("overflow", "visible").append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

  var partition = _d2.default.layout.partition().sort(null).size([2 * Math.PI, radius * radius]).value(modeFns[modeInitial]);

  //
  // Creates the title text in
  // the center of the rings.
  //
  var title = svg.append("text").text(root.name).attr("x", 0).attr("y", -5).style("font-size", "18px").style("fill", "white").style("font-weight", 500).style("alignment-baseline", "middle").style("text-anchor", "middle");

  //
  // Likewise, this is the file
  // percentage size stat below the title
  //
  var percentageSize = svg.append("text").text("100%").attr("x", 0).attr("y", 20).style("fill", "white").style("font-size", "16px").style("font-weight", 300).style("alignment-baseline", "middle").style("text-anchor", "middle");

  //
  // Likewise, this is the file
  // size stat below the title
  //
  var size = svg.append("text").text("(\"" + (0, _prettysize2.default)(root.value || root.size) + ")").attr("x", 0).attr("y", 40).style("fill", "white").style("font-size", "16px").style("alignment-baseline", "middle").style("text-anchor", "middle");

  //
  // Each arc is wrapped in a group element,
  // to apply rotation transforms while
  // changing size and shape.
  //
  var groups = svg.datum(root).selectAll("g").data(partition.nodes).enter().append("g").attr("transform", "rotate(" + deg + ")");

  var maxdepth = groups[0].reduce(function (max, el) {
    return Math.max(max, el.__data__.depth);
  }, 0);

  //
  // Actually create the arcs for each
  // file.
  //
  var path = groups.append("path").attr("d", _d3Utils.initArc).attr("display", function (d) {
    return d.depth ? null : "none";
  }) //eslint-disable-line no-arrow-condition
  .style("stroke", "#2B2B2B").style("stroke-width", "0").style("fill-rule", "evenodd").each(function (d) {
    d.x0 = d.x;
    d.dx0 = d.dx;
    d.el = this; //eslint-disable-line no-invalid-this
  });

  var found = [];
  var _select = function _select(node, selector) {
    node.enabled = selector(node);
    if (node.enabled) {
      found.push(node);
    }
    if (node.children) {
      for (var _iterator = node.children, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var c = _ref;

        _select(c, selector);
      }
    }
  };
  _select(root, function () {
    return true;
  });

  _d2.default.select(domElements.search).on("keyup", function () {
    var text = this.value.replace(/^\s+/, "").replace(/\s+$/, ""); //eslint-disable-line no-invalid-this, max-len
    if (text.length > 0) {
      (function () {
        found = [];
        var re = new RegExp(text, "i");
        _select(root, function (node) {
          return node.name.match(re) !== null;
        });
        if (found.length === 1) {
          title.text(found[0].name);
          size.text((0, _prettysize2.default)(found[0].value || found[0].size));
        } else {
          title.text("Multiple found");
          var completeSize = 0;
          for (var _iterator2 = found, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
            var _ref2;

            if (_isArray2) {
              if (_i2 >= _iterator2.length) break;
              _ref2 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done) break;
              _ref2 = _i2.value;
            }

            var n = _ref2;

            completeSize += n.size;
          }
          size.text((0, _prettysize2.default)(completeSize) + " total");
        }
      })();
    } else {
      _select(root, function () {
        return true;
      });
    }
    groups.select("path").transition().duration(200).style("opacity", function (d) {
      return d.enabled ? 1.0 : 0.2;
    });
  });

  // create color scheme
  function useScheme() {
    //eslint-disable-line func-style
    var specials = _schemes2.default.specials;
    var colors = _schemes2.default.main;

    (0, _keys2.default)(specials).forEach(function (k) {
      var idx = colors.indexOf(specials[k].toLowerCase()); //
      if (idx === -1) {
        return;
      }
      colors.splice(idx, 1);
    });

    var color = _d2.default.scale.ordinal().range(colors);

    var _path = path.transition().duration(600).ease(_d3Utils.bounceHigh, 1000).delay(function (d) {
      return d.x * 100 + d.y / maxdepth * 0.06125;
    });

    _path.style("fill", function (d) {
      var name = d.children ? d.name : d.parent.name;
      d.c = specials[name] || color(name);
      return d.c;
    });
  }

  useScheme();

  var ptrans = 0;
  path.transition().duration(1000).each(function () {
    return ptrans++;
  }).ease("elastic", 2, 1).delay(function (d, i) {
    return d.x * 100 + i % 4 * 250 + d.y / maxdepth * 0.25;
  }).attr("d", _d3Utils.arc).each("interrupt", function () {
    _d2.default.select(domElements.search).transition().duration(200).style("opacity", 1);
  }).each("end", function () {
    ptrans--;
  });

  //
  // Rotates the newly created
  // arcs back towards their original
  // position.
  //
  var gtrans = 0;
  groups.transition().duration(3250).each(function () {
    return gtrans++;
  }).delay(function (d, i) {
    return d.x * 100 + i % 4 * 250 + d.y / maxdepth * 0.25 + 250;
  }).attrTween("transform", (0, _d3Utils.rotateTween)(deg)).each("end", function () {
    gtrans--;
    if (ptrans === 0 && gtrans === 0) {
      _d2.default.select(domElements.search).transition().duration(200).style("opacity", 1);
    }
  });

  function highlight(d) {
    //eslint-disable-line func-style
    if (d) {
      _d2.default.select(d.el).transition().delay(function (d) {
        return (d.depth - 1) * 300 / maxdepth;
      }) //eslint-disable-line no-shadow
      .ease("back-out", 10).duration(500).attrTween("d", highlight.tween).style("fill", function (d) {
        return d.c;
      }); //eslint-disable-line no-shadow
    }
    if (d.children) {
      var i = d.children.length;
      while (i--) {
        highlight(d.children[i]);
      }
    }
  }
  highlight.tween = (0, _d3Utils.hoverTween)(1);

  function unhighlight(d) {
    //eslint-disable-line func-style
    if (d.el) {
      _d2.default.select(d.el).transition().delay(function (d) {
        return (d.depth - 1) * 300 / maxdepth;
      }) //eslint-disable-line no-shadow
      .ease("back-out", 4).duration(500).attrTween("d", unhighlight.tween).style("fill", function (d) {
        return d.c;
      }); //eslint-disable-line no-shadow
    }
    if (d.children) {
      var i = d.children.length;
      while (i--) {
        unhighlight(d.children[i]);
      }
    }
  }
  unhighlight.tween = (0, _d3Utils.hoverTween)(0);

  groups.on("mouseover", function (d) {
    highlight(d);
    title.text(d.name).style("font-size", Math.min(radius / d.name.length, 40) + "px");

    var sizeInPercentage = (d.value / root.value * 100).toFixed(2);
    percentageSize.text(sizeInPercentage + "%");
    size.text("(" + (0, _prettysize2.default)(d.value || d.size) + ")");
  }).on("mouseout", function (d) {
    unhighlight(d);
    title.text(root.name);
    size.text((0, _prettysize2.default)(root.value || root.size));
    percentageSize.text(root.value / root.size * 100 + "%");
  });

  var updateMode = function updateMode(mode, update) {
    (0, _mode.highlightMode)(mode);
    if (!update) {
      return;
    }
    groups.data(partition.value(modeFns[mode]).nodes).select("path").transition().duration(1500).attrTween("d", _d3Utils.arcTween);
  };

  (0, _mode2.default)(updateMode, domElements);
  updateMode(modeInitial, false);
};

var _d = require("d3");

var _d2 = _interopRequireDefault(_d);

var _prettysize = require("prettysize");

var _prettysize2 = _interopRequireDefault(_prettysize);

var _schemes = require("./schemes");

var _schemes2 = _interopRequireDefault(_schemes);

var _d3Utils = require("./d3-utils");

var _mode = require("./mode");

var _mode2 = _interopRequireDefault(_mode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*eslint-disable no-magic-numbers*/

var modeInitial = "size";
var modeFns = {
  count: function count() {
    return 1;
  },
  size: function size(d) {
    return d.size;
  }
};